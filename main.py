import telebot
from telebot import types
import json
import os
import random
from datetime import datetime, timedelta
from models_data import models_data
import threading
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import sys



class ReloadHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith('.py'):
            print(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ: {event.src_path}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...')
            os.execl(sys.executable, sys.executable, *sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞


def start_bot():

    API_TOKEN = '7730145071:AAF1fXgLmJPPvEHHl6jmKbI3ZmGl-q9xrhg'
    bot = telebot.TeleBot(API_TOKEN)
    user_data_file = 'user_data.json'


    banks_data = {
        'sberbank': {
            'owner': '–°–∞–≤—á–µ–Ω–∫–æ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞',
            'card_number': '2200280414795189',
            'active': False,
        },
        't_bank': {
            'owner': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            'card_number': '1234567890123456',
            'active': False,
        },
        'alfabank': {
            'owner': '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞',
            'card_number': '9876543210987654',
            'active': False,
        },
        'ozon': {
            'owner': '–ê–Ω–¥—Ä–µ–π –ú–æ—Ä–æ–∑–æ–≤',
            'card_number': '2204320335878858',
            'active': True,
        },
    }

    cities = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
        "–ö–∞–∑–∞–Ω—å", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–û–º—Å–∫", "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
        "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
        "–¢—é–º–µ–Ω—å", "–ò–∂–µ–≤—Å–∫", "–ë–∞—Ä–Ω–∞—É–ª", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
        "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–ö–∞–ª—É–≥–∞", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–¢—É–ª–∞", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
        "–°–∞—Ä–∞–Ω—Å–∫", "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã", "–ö–µ–º–µ—Ä–æ–≤–æ", "–°–æ—á–∏"
    ]
    time_options = {
        '1': "–ß–∞—Å - 4100‚ÇΩ",
        '2': "2 —á–∞—Å–∞ - 7925‚ÇΩ",
        'night': "–ù–æ—á—å - 16400‚ÇΩ"
    }


    if os.path.exists(user_data_file):
        with open(user_data_file, 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    else:
        user_data = {}

    def save_data():
        with open(user_data_file, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=4)



    def periodic_message():
        while True:
            time.sleep(32400)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9 —á–∞—Å–æ–≤)
            for user_id in user_data.keys():  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                bot.send_message(user_id, "–¢–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ –∏ –æ–¥–∏–Ω–æ–∫–æ ? ‚òπÔ∏è\n–£—Å—Ç–∞–ª –∏ —Ö–æ—á–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å ? üò§\n–°–∫–æ—Ä–µ–µ –∑–∞–∫–∞–∑—ã–≤–∞–π –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π, –æ–Ω–∏ –º–æ–≥—É—Ç —Ç–≤–æ—Ä–∏—Ç—å –±–µ–∑—É–º–Ω—ã–µ –≤–µ—â–∏. ü•µ")

    threading.Thread(target=periodic_message, daemon=True).start()


    city_models = {city: {'models': models, 'count': 0, 'last_update': None} for city, models in models_data.items()}

    def get_models_count_for_city(city):
        if city not in city_models:
            return 0

        now = datetime.now()

        if city_models[city]['last_update'] is None or now - city_models[city]['last_update'] > timedelta(hours=3):
            city_models[city]['count'] = random.randint(5, min(len(city_models[city]['models']), 15))
            city_models[city]['last_update'] = now

        return city_models[city]['count']

    def get_random_models(city):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ city_models
        if city not in city_models:
            print(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ city_models.")
            return []

        available_models = city_models[city]['models']
        count = get_models_count_for_city(city)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ count –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if count > len(available_models):
            count = len(available_models)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        return random.sample(available_models, count) if count > 0 else []

    def create_model_profile(model, photo_number=1):
        name = model['name']
        age = model['age']
        photo_path = model['photo'] if photo_number == 1 else model.get('photo2')
        description = model['description']

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å", callback_data=f"order_{name}"))
        markup.add(types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{name}"))
        markup.add(types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data=f"other_photo_{name}_{photo_number}"))
        return f"üë§ {name}, {age} –ª–µ—Ç\n\n{description}", photo_path, markup

    @bot.callback_query_handler(func=lambda call: call.data.startswith('other_photo_'))
    def switch_photo(call):
        parts = call.data.split('_')
        model_name = parts[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        current_photo_number = int(parts[3])  # –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ (1 –∏–ª–∏ 2)
        new_photo_number = 2 if current_photo_number == 1 else 1

        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥ –∏ –º–æ–¥–µ–ª—å
        city = user_data[str(call.message.chat.id)]['city']
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            profile_text, photo_path, markup = create_model_profile(model, new_photo_number)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=profile_text, reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    def send_model_profile(call):
        model_name = call.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
        model = None

        for city, models in models_data.items():
            for m in models:
                if m['name'] == model_name:
                    model = m
                    break
            if model:
                break

        if model:
            profile_text, photo_path, markup = create_model_profile(model)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            print(f"–ü—É—Ç—å –∫ —Ñ–æ—Ç–æ: {photo_path}")
            if os.path.exists(photo_path):
                try:
                    with open(photo_path, 'rb') as photo:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                        bot.send_photo(call.message.chat.id, photo, caption=profile_text, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = str(message.chat.id)
        city = user_data[user_id]['city']
        models = get_models_for_city(city)  # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        models_count = len(models)
        if user_id not in user_data:
            user_data[user_id] = {'rating': 5, 'city': None, 'currency': None}
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫.")
        else:
            models_count = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–¥–∞–Ω, –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
            if city:
                models_count = get_models_count_for_city(city)
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
            profile_info = (
                f"üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"‚ùï–í–∞—à ID - : {user_id}\n\n"
                f"üèô –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ - {user_data[user_id]['city']}\n\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {user_data[user_id]['rating']} ‚≠êÔ∏è\n"
                f"–í–∞–ª—é—Ç–∞: {user_data[user_id]['currency']}\n"
                f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - {models_count}\n"  # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
            )

            action_markup = types.InlineKeyboardMarkup()
            action_markup.add(types.InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"))
            # action_markup.add(types.InlineKeyboardButton("–°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã", callback_data="change_currency"))
            # action_markup.add(types.InlineKeyboardButton("–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞", callback_data="change_city"))

            bot.send_message(message.chat.id, profile_info, reply_markup=action_markup)

            reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("‚ù§Ô∏è‚Äçüî•–ú–æ–¥–µ–ª–∏")
            btn2 = types.KeyboardButton("üë§–ü—Ä–æ—Ñ–∏–ª—å")
            info = types.KeyboardButton("üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            tech = types.KeyboardButton("üßë‚Äçüíª–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
            reply_markup.add(btn1, btn2, info, tech)

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    @bot.message_handler(func=lambda message: user_data.get(str(message.chat.id), {}).get('city') is None)
    def set_city(message):
        user_id = str(message.chat.id)

        city = message.text
        if city in cities:
            user_data[user_id]['city'] = city
            save_data()  
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üá∑üá∫RUB", callback_data="currency_RUB"))
            markup.add(types.InlineKeyboardButton("üá∞üáøKZT", callback_data="currency_KZT"))

            bot.send_message(
                message.chat.id,
                f"–ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑:")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
    def currency_choice(call):
        user_id = str(call.message.chat.id)
        currency = call.data.split('_')[1].upper()
        user_data[user_id]['currency'] = currency
        save_data()

        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency}")

        city = user_data[user_id].get('city')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥

        models_count = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–¥–∞–Ω, –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
        if city:
            models_count = get_models_count_for_city(city)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞

        profile_info = (
            f"üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"‚ùï–í–∞—à ID - : {user_id}\n\n"
            f"üèô –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ - {city if city else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {user_data[user_id]['rating']} ‚≠êÔ∏è\n"
            f"–í–∞–ª—é—Ç–∞: {user_data[user_id]['currency']}\n"
            f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - {models_count}\n"  # –¢–µ–ø–µ—Ä—å models_count –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        )

        action_markup = types.InlineKeyboardMarkup()
        action_markup.add(types.InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"))
        # action_markup.add(types.InlineKeyboardButton("–°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã", callback_data="change_currency"))
        # action_markup.add(types.InlineKeyboardButton("–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞", callback_data="change_city"))

        bot.send_message(call.message.chat.id, profile_info, reply_markup=action_markup)

        reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("‚ù§Ô∏è‚Äçüî•–ú–æ–¥–µ–ª–∏")
        btn2 = types.KeyboardButton("üë§–ü—Ä–æ—Ñ–∏–ª—å")
        info = types.KeyboardButton("üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        tech = types.KeyboardButton("üßë‚Äçüíª–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        reply_markup.add(btn1, btn2, info, tech)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    def get_models_for_city(city):
        if city in models_data:
            models = models_data[city]
            random.shuffle(models)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            return models
        return []

    @bot.message_handler(content_types=['text'])
    def func(message):
        user_id = str(message.chat.id)

        if user_id in user_data and user_data[user_id].get('city'):
            if user_data[user_id].get('reserving'):
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                handle_text_message(message)
                return

        if user_id in user_data and user_data[user_id]['city']:
            if message.text == "‚ù§Ô∏è‚Äçüî•–ú–æ–¥–µ–ª–∏":
                city = user_data[user_id]['city']
                models = get_random_models(city)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–æ–¥–µ–ª–∏
                models_count = len(models)
                
                if models_count > 0:
                    response_text = f"–í –≥–æ—Ä–æ–¥–µ {city} –Ω–∞–π–¥–µ–Ω–æ {models_count} –º–æ–¥–µ–ª–µ–π:\n"
                    markup = types.InlineKeyboardMarkup()
                    
                    for index, model in enumerate(models):
                        model_info = f"#{index + 1} | {model['name']} | {model['age']} –ª–µ—Ç"
                        markup.add(types.InlineKeyboardButton(model_info, callback_data=f"model_{model['name']}"))
                    
                    bot.send_message(message.chat.id, response_text, reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            
            elif message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—ã–π —Ä–∞–∑
                city = user_data[user_id]['city']
                models_count = get_models_count_for_city(city)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞

                profile_info = (
                    f"üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\n"
                    f"‚ùï–í–∞—à ID: {user_id}\n\n"
                    f"üèô–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ - {city}\n\n"
                    f"–†–µ–π—Ç–∏–Ω–≥: {user_data[user_id]['rating']} ‚≠êÔ∏è\n"
                    f"–í–∞–ª—é—Ç–∞: {user_data[user_id]['currency']}\n"
                    f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - {models_count}\n"
                )
                action_markup = types.InlineKeyboardMarkup()
                action_markup.add(types.InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"))

                bot.send_message(message.chat.id, profile_info, reply_markup=action_markup)
            elif message.text == "üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                bot.send_message(message.chat.id, "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,\n\n–•–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—Ç—Ä–∞—á–∏–≤–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Å–∏–ª–∏–π –Ω–∞ –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ—Å—É–≥.\n\n–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å —É—á–µ—Ç–æ–º —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –±—ã—Å—Ç—Ä–µ–µ –∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n–ü–æ—á–µ–º—É –±—ã –≤–∞–º –Ω–µ –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –≤ –ø–æ–∏—Å–∫–∞—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è?\n\n–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç —É–¥–µ–ª–∏—Ç—å —Ç–æ–º—É, —á—Ç–æ –º—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ–ª–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–µ–≥–æ —ç—Å–∫–æ—Ä—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞")
            elif message.text == "üßë‚Äçüíª–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/support"))
                bot.send_message(message.chat.id, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Å–∫–æ—Ä—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ª—é–±—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–µ—ë, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π —É—Å–ª—É–≥, –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n\n –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n1. –ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏, –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–ª–∏ –∫ –ø—Ä–æ–±–ª–µ–º–µ.\n2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.\n\n–°—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–ª–µ–±–ª—é—Ç—Å—è:\n- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (10 –º–∏–Ω—É—Ç): –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –±—ã—Å—Ç—Ä–æ.\n- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å (30 –º–∏–Ω—É—Ç - 1 —á–∞—Å): –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ—à–µ–Ω–∏—è.\n\n–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ —ç—Å–∫–æ—Ä—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤.", reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –≤–∞–ª—é—Ç—É.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('model_'))
    def model_profile(call):
        model_name = call.data.split('_')[1]
        city = user_data[str(call.message.chat.id)]['city']
        
        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            profile_text, photo_path, markup = create_model_profile(model)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if os.path.exists(photo_path):
                try:
                    with open(photo_path, 'rb') as photo:
                        bot.send_photo(call.message.chat.id, photo, caption=profile_text, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ.")
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
    def order_model(call):
        model_name = call.data.split('_')[1]
        city = user_data[str(call.message.chat.id)]['city']
        
        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            photo_path = model['photo']  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    time_markup = types.InlineKeyboardMarkup()
                    time_markup.add(types.InlineKeyboardButton("üèû–ß–∞—Å - 4100‚ÇΩ", callback_data=f'time_1_{model["name"]}'),
                                    types.InlineKeyboardButton("üåÑ2 —á–∞—Å–∞ - 7925‚ÇΩ", callback_data=f'time_2_{model["name"]}'),
                                    types.InlineKeyboardButton("üåÉ–ù–æ—á—å - 16400‚ÇΩ", callback_data=f'time_night_{model["name"]}'),
                                    types.InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back_to_model_{model['name']}"))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=time_markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_model_'))
    def back_to_model(call):
        parts = call.data.split('_')
        model_name = parts[3] if len(parts) > 3 else None  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        city = user_data[str(call.message.chat.id)]['city']
        
        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            profile_text, photo_path, markup = create_model_profile(model)

            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=profile_text, reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
    def choose_time(call):
        parts = call.data.split('_')
        time_key = parts[1]  # –≠—Ç–æ '1', '2' –∏–ª–∏ 'night'
        model_name = '_'.join(parts[2:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        city = user_data[str(call.message.chat.id)]['city']

        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            photo_path = model['photo']
            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    payment_markup = types.InlineKeyboardMarkup()
                    payment_markup.add(types.InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data='payment_card'))
                    payment_markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data='payment_cash'))
                    payment_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back_to_model_{model['name']}"))

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–∞—Ä–∏—Ñ–∞
                    tariff_text = time_options.get(time_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
                    caption_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {model['name']} - {tariff_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
                    bot.send_photo(call.message.chat.id, photo, caption=caption_text, reply_markup=payment_markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
    @bot.callback_query_handler(func=lambda call: call.data == 'payment_cash')
    def handle_cash_payment(call):
        # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏"
        bot.send_message(
            call.message.chat.id, 
            "‚ö†Ô∏è–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –º–µ—Ä–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        )

    @bot.callback_query_handler(func=lambda call: call.data == 'payment_card')
    def choose_payment_bank(call):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –∏ —Ç–∞—Ä–∏—Ñ–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = call.message.caption.split("\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        if len(parts) < 1:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç–∞—Ä–∏—Ñ–µ.")
            return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞
        model_info = parts[0].strip()
        if " - " in model_info:
            model_name, tariff_text = model_info.rsplit(" - ", 1)  # –†–∞–∑–±–∏–≤–∞–µ–º —Å –∫–æ–Ω—Ü–∞ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        else:
            model_name = model_info
            tariff_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        model_name = model_name.strip()
        tariff_text = tariff_text.strip()

        city = user_data[str(call.message.chat.id)]['city']

        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        model = next((m for m in models_data[city] if m['name'] in model_name), None)

        if model:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
            photo_path = model['photo']
            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤
                    bank_markup = types.InlineKeyboardMarkup()
                    bank_markup.add(types.InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data='bank_sberbank'))
                    bank_markup.add(types.InlineKeyboardButton("–¢-–ë–∞–Ω–∫", callback_data='bank_t_bank'))
                    bank_markup.add(types.InlineKeyboardButton("–ê–ª—å—Ñ–∞–±–∞–Ω–∫", callback_data='bank_alfabank'))
                    bank_markup.add(types.InlineKeyboardButton("–û–∑–æ–Ω", callback_data='bank_ozon'))
                    bank_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back_to_model_{model['name']}"))

                    caption_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n\n{tariff_text}"
                    bot.send_photo(call.message.chat.id, photo, caption=caption_text, reply_markup=bank_markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    @bot.callback_query_handler(func=lambda call: call.data.startswith('bank_'))
    def handle_bank_selection(call):
        bank_name = call.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–∞–Ω–∫–∞
        city = user_data[str(call.message.chat.id)]['city']
        model_info = call.message.caption.split("\n")

        if len(model_info) < 1:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç–∞—Ä–∏—Ñ–µ.")
            return

        amount = "9400‚ÇΩ"  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        model_name = model_info[0].strip()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–∞–Ω–∫–µ
        bank_info = banks_data.get(bank_name)

        if bank_info and bank_info['active']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_message = (
                "‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n\n"
                f"–°—É–º–º–∞: {amount}\n\n"
                "‚óΩÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n"
                f"‚î£ {bank_info['owner']}\n"
                f"‚î£ {bank_name.capitalize()}\n"
                f"‚îó {bank_info['card_number']}\n\n"
                "‚ö†Ô∏è –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç!\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.\n"
                "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
            )
            bot.send_message(call.message.chat.id, payment_message)
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            
    @bot.message_handler(content_types=['photo', 'document'])
    def handle_payment_proof(message):
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–µ–±–µ –≤ –ª–∏—á–∫—É
        chat_id = message.chat.id
        user_id = message.from_user.id

        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
        if message.content_type == 'photo':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–æ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ photos)
            file_id = message.photo[-1].file_id

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file_info = bot.get_file(file_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–µ–±–µ –≤ –ª–∏—á–∫—É
            bot.send_photo(
                chat_id=7411578535,  # –í–∞—à Telegram ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
                photo=file_info.file_id,
                caption=f"–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} (ID: {user_id})"
            )

        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
        elif message.content_type == 'document':
            # –ü–æ–ª—É—á–∞–µ–º file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
            file_id = message.document.file_id

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file_info = bot.get_file(file_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å–µ–±–µ –≤ –ª–∏—á–∫—É
            bot.send_document(
                chat_id=7411578535,  # –í–∞—à Telegram ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
                document=file_info.file_id,
                caption=f"–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} (ID: {user_id})"
            )

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")


    @bot.callback_query_handler(func=lambda call: call.data.startswith('reserve_'))
    def reserve_model(call):
        user_id = str(call.message.chat.id)
        model_name = call.data.split('_')[1]

        if user_id not in user_data:
            user_data[user_id] = {
                'city': "–ú–æ—Å–∫–≤–∞",
                'rating': 5,
                'currency': "RUB",
                'reserving': False,
                'model_name': None
            }

        user_data[user_id]['reserving'] = True
        user_data[user_id]['model_name'] = model_name
        save_data()

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏
        reservation_message = (
            "–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:\n"
            "- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏;\n"
            "- –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ (–∞–¥—Ä–µ—Å, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞, —É –í–∞—Å –∏–ª–∏ —É –º–æ–¥–µ–ª–∏);\n"
            "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ (–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram)"
        )

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reserve_{model_name}"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        message_sent = bot.send_message(call.message.chat.id, reservation_message, reply_markup=markup)
        user_data[user_id]['reservation_message_id'] = message_sent.message_id


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_reservation")
    def cancel_reservation(call):
        user_id = str(call.message.chat.id)
        
        if user_id not in user_data or not user_data[user_id].get('reserving'):
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        model_name = user_data[user_id].get('model_name')
        city = user_data[user_id].get('city')

        # –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        model = next((m for m in models_data[city] if m['name'] == model_name), None)

        if model:
            profile_text, photo_path, markup = create_model_profile(model)

            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=profile_text, reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(call.message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        user_data[user_id]['reserving'] = False
        user_data[user_id]['model_name'] = None
        save_data()


    @bot.message_handler(content_types=['text'])
    def handle_text_message(message):
        user_id = str(message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if user_id in user_data and user_data[user_id].get('reserving'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_data[user_id]['reservation_details'] = message.text
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏ –≥–æ—Ä–æ–¥
            model_name = user_data[user_id]['model_name']  
            city = user_data[user_id]['city']
            
            model = next((m for m in models_data[city] if m['name'] == model_name), None)

            if model:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                if 'reservation_message_id' in user_data[user_id]:
                    try:
                        bot.delete_message(chat_id=user_id, message_id=user_data[user_id]['reservation_message_id'])
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã
                bot.send_message(message.chat.id, "‚úÖ –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã.")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                photo_path = model['photo']
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo:
                        time_markup = types.InlineKeyboardMarkup()
                        time_markup.add(types.InlineKeyboardButton("üèû–ß–∞—Å - 4100‚ÇΩ", callback_data=f'time_1_{model["name"]}'),
                                        types.InlineKeyboardButton("üåÑ2 —á–∞—Å–∞ - 7925‚ÇΩ", callback_data=f'time_2_{model["name"]}'),
                                        types.InlineKeyboardButton("üåÉ–ù–æ—á—å - 16400‚ÇΩ", callback_data=f'time_night_{model["name"]}'),
                                        types.InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back_to_model_{model['name']}"))
                        
                        caption_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:"
                        bot.send_photo(message.chat.id, photo, caption=caption_text, reply_markup=time_markup)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                user_data[user_id]['reserving'] = False
                user_data[user_id]['model_name'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
                save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            else:
                bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")

            

    try:
        bot.polling(non_stop=True)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        time.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        start_bot()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞


if __name__ == "__main__":
    path = './'  # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
    event_handler = ReloadHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()

    try:
        start_bot()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except KeyboardInterrupt:
        print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
    finally:
        observer.stop()  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    observer.join()



